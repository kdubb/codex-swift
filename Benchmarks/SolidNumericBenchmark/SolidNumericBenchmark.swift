// Benchmark boilerplate generated by Benchmark

import Benchmark
import Foundation
import Solid

let benchmarks: @Sendable () -> Void = {

  // MARK: - BigDecimal

  var decimalConfig = Benchmark.Configuration()
  decimalConfig.scalingFactor = .one

  Benchmark("BigDecimal Addition", configuration: decimalConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigDecimal(1.5),
      BigDecimal(3.14159),
      BigDecimal(-2.718),
      BigDecimal(1000000.0),
      BigDecimal(-9876.54321),
      BigDecimal("12345678901234567890"),
      BigDecimal(0),
      BigDecimal(42),
    ]
    let rhsValues = [
      BigDecimal(2.5),
      BigDecimal(-3.14159),
      BigDecimal(2.718),
      BigDecimal(-1000000.0),
      BigDecimal(9876.54321),
      BigDecimal("98765432109876543210"),
      BigDecimal(0),
      BigDecimal(-42),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs + rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Subtraction", configuration: decimalConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigDecimal(1.5),
      BigDecimal(3.14159),
      BigDecimal(-2.718),
      BigDecimal(1000000.0),
      BigDecimal(-9876.54321),
      BigDecimal("12345678901234567890"),
      BigDecimal(0),
      BigDecimal(42),
    ]
    let rhsValues = [
      BigDecimal(2.5),
      BigDecimal(-3.14159),
      BigDecimal(2.718),
      BigDecimal(-1000000.0),
      BigDecimal(9876.54321),
      BigDecimal("98765432109876543210"),
      BigDecimal(0),
      BigDecimal(-42),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs - rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Multiply", configuration: decimalConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigDecimal(1.5),
      BigDecimal(3.14159),
      BigDecimal(-2.718),
      BigDecimal(1000.0),
      BigDecimal(-9.54321),
      BigDecimal(123456),
      BigDecimal(0),
      BigDecimal(42),
    ]
    let rhsValues = [
      BigDecimal(2.5),
      BigDecimal(-3.14159),
      BigDecimal(2.718),
      BigDecimal(-1000.0),
      BigDecimal(9.54321),
      BigDecimal(654321),
      BigDecimal(0),
      BigDecimal(-42),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs * rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Divide", configuration: decimalConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigDecimal(1.5),
      BigDecimal(3.14159),
      BigDecimal(-2.718),
      BigDecimal(1000000.0),
      BigDecimal(-9876.54321),
      BigDecimal("12345678901234567890"),
      BigDecimal(0),
      BigDecimal(42),
    ]
    let rhsValues = [
      BigDecimal(2.5),
      BigDecimal(-3.14159),
      BigDecimal(2.718),
      BigDecimal(-1000.0),
      BigDecimal(9.54321),
      BigDecimal(654321),
      BigDecimal(1),  // Avoid division by zero
      BigDecimal(-42),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs / rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Modulo", configuration: decimalConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigDecimal(10.5),
      BigDecimal(3.14159),
      BigDecimal(-27.18),
      BigDecimal(1000000.0),
      BigDecimal(-9876.54321),
      BigDecimal("12345678901234567890"),
      BigDecimal(0),
      BigDecimal(42),
    ]
    let rhsValues = [
      BigDecimal(2.5),
      BigDecimal(3.0),
      BigDecimal(2.718),
      BigDecimal(1000.0),
      BigDecimal(9.0),
      BigDecimal(654321),
      BigDecimal(1),  // Avoid division by zero
      BigDecimal(5),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.remainder(dividingBy: rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Power 10^[1-10]", configuration: decimalConfig) { benchmark in
    // Fixed set of base values and powers for consistent results
    let baseValues = [
      BigDecimal(1.5),
      BigDecimal(2.0),
      BigDecimal(-2.0),
      BigDecimal(0.5),
      BigDecimal(-0.5),
      BigDecimal(10.0),
      BigDecimal("12345"),
      BigDecimal(0),
    ]
    let powerValues = [1, 2, 3, 4, 5, 6, 7, 8]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<baseValues.count {
        let base = baseValues[i]
        let power = powerValues[i]
        let result = base.raised(to: power)
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Square Root", configuration: decimalConfig) { benchmark in
    // Use an array of positive numbers for consistent testing
    let numbers = [
      BigDecimal(1.0),
      BigDecimal(4.0),
      BigDecimal(9.0),
      BigDecimal(16.0),
      BigDecimal(25.0),
      BigDecimal(100.0),
      BigDecimal(10000.0),
      BigDecimal(1000000.0),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = number.squareRoot()
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal GCD", configuration: decimalConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigDecimal(10),
      BigDecimal(14),
      BigDecimal(60),
      BigDecimal(1000),
      BigDecimal(17),
      BigDecimal(12345),
      BigDecimal(0),
      BigDecimal(42),
    ]
    let rhsValues = [
      BigDecimal(5),
      BigDecimal(21),
      BigDecimal(48),
      BigDecimal(250),
      BigDecimal(23),
      BigDecimal(54321),
      BigDecimal(42),
      BigDecimal(7),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.greatestCommonDivisor(rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal LCM", configuration: decimalConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigDecimal(10),
      BigDecimal(14),
      BigDecimal(60),
      BigDecimal(1000),
      BigDecimal(17),
      BigDecimal(12345),
      BigDecimal(1),
      BigDecimal(42),
    ]
    let rhsValues = [
      BigDecimal(5),
      BigDecimal(21),
      BigDecimal(48),
      BigDecimal(250),
      BigDecimal(23),
      BigDecimal(54321),
      BigDecimal(42),
      BigDecimal(7),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.lowestCommonMultiple(rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Rescale", configuration: decimalConfig) { benchmark in
    // Fixed set of numbers and scales for consistent results
    let numberValues = [
      BigDecimal(1.5),
      BigDecimal(3.14159),
      BigDecimal(-2.718),
      BigDecimal(1000.12345),
      BigDecimal(-9876.54321),
      BigDecimal("123456.789"),
      BigDecimal(0),
      BigDecimal(42),
    ]
    let scaleValues = [0, 1, 2, 3, 4, 5, 6, 7]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<numberValues.count {
        let number = numberValues[i]
        let scale = scaleValues[i]
        let result = number.scaled(to: scale)
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Normalize", configuration: decimalConfig) { benchmark in
    // Fixed set of numbers with trailing zeros for consistent results
    let numbers = [
      BigDecimal(1.5000),
      BigDecimal(3.1400),
      BigDecimal(-2.7180),
      BigDecimal(1000.0000),
      BigDecimal(-9876.5000),
      BigDecimal("123456.0000"),
      BigDecimal(0.000000),
      BigDecimal(42.00),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = number.normalized()
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Initialize from Integer Literal", configuration: decimalConfig) { benchmark in
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      let value1: BigDecimal = 12345678901234567890
      let value2: BigDecimal = 98765432109876543210
      let value3: BigDecimal = 4294967296
      let value4: BigDecimal = 18446744073709551615
      blackHole(value1)
      blackHole(value2)
      blackHole(value3)
      blackHole(value4)
    }
  }

  Benchmark("BigDecimal Initialize from String", configuration: decimalConfig) { benchmark in
    let stringValues = [
      "12345678901234567890",
      "98765432109876543210",
      "4294967296",
      "18446744073709551615",
      "3.14159265358979323846",
      "-2.718281828459045235360",
      "1234.56789",
      "-9876.54321",
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for stringValue in stringValues {
        let result = BigDecimal(stringValue)
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Convert to String", configuration: decimalConfig) { benchmark in
    let numbers = [
      BigDecimal("12345678901234567890"),
      BigDecimal("98765432109876543210"),
      BigDecimal("4294967296"),
      BigDecimal("18446744073709551615"),
      BigDecimal("3.14159265358979323846"),
      BigDecimal("-2.718281828459045235360"),
      BigDecimal("1234.56789"),
      BigDecimal("-9876.54321"),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = number.description
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Initialize from Double", configuration: decimalConfig) { benchmark in
    let doubleValues = [
      0.0,
      1.0,
      -1.0,
      3.14159265358979323846,
      -2.718281828459045235360,
      1234.56789,
      -9876.54321,
      Double.pi,
      Double.greatestFiniteMagnitude / 1000.0,    // Use a fraction to avoid overflow
      Double.leastNonzeroMagnitude * 1000.0,    // Use a multiple to avoid underflow
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for doubleValue in doubleValues {
        let result = BigDecimal(doubleValue)
        blackHole(result)
      }
    }
  }

  Benchmark("BigDecimal Convert to Double", configuration: decimalConfig) { benchmark in
    let decimalValues = [
      BigDecimal(0.0),
      BigDecimal(1.0),
      BigDecimal(-1.0),
      BigDecimal(3.14159265358979323846),
      BigDecimal(-2.718281828459045235360),
      BigDecimal(1234.56789),
      BigDecimal(-9876.54321),
      BigDecimal(Double.pi),
      BigDecimal("12345678901234567890"),
      BigDecimal("-98765432109876543210"),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for decimalValue in decimalValues {
        let result = Double(decimalValue)
        blackHole(result)
      }
    }
  }

  // MARK: - BigInt

  var intConfig = Benchmark.Configuration()
  intConfig.scalingFactor = .kilo

  Benchmark("BigInt Addition", configuration: intConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(0),
      BigInt(42),
      BigInt(-42),
      BigInt("12345678901234567890")!,
      BigInt("98765432109876543210")!,
      BigInt("-12345678901234567890")!,
    ]
    let rhsValues = [
      BigInt(987654321),
      BigInt(-123456789),
      BigInt(0),
      BigInt(-42),
      BigInt(42),
      BigInt("98765432109876543210")!,
      BigInt("-12345678901234567890")!,
      BigInt("98765432109876543210")!,
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs + rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Subtraction", configuration: intConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(0),
      BigInt(42),
      BigInt(-42),
      BigInt("12345678901234567890")!,
      BigInt("98765432109876543210")!,
      BigInt("-12345678901234567890")!,
    ]
    let rhsValues = [
      BigInt(987654321),
      BigInt(-123456789),
      BigInt(0),
      BigInt(-42),
      BigInt(42),
      BigInt("98765432109876543210")!,
      BigInt("-12345678901234567890")!,
      BigInt("98765432109876543210")!,
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs - rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Multiplication", configuration: intConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigInt(12345),
      BigInt(-9876),
      BigInt(0),
      BigInt(42),
      BigInt(-42),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(10000),
    ]
    let rhsValues = [
      BigInt(9876),
      BigInt(-12345),
      BigInt(0),
      BigInt(-42),
      BigInt(42),
      BigInt(-987654321),
      BigInt(123456789),
      BigInt(10000),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs * rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Division", configuration: intConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(0),
      BigInt(42),
      BigInt(-42),
      BigInt("12345678901234567890")!,
      BigInt("98765432109876543210")!,
      BigInt("-12345678901234567890")!,
    ]
    let rhsValues = [
      BigInt(9876),
      BigInt(-12345),
      BigInt(1),
      BigInt(-7),
      BigInt(6),
      BigInt(987654321),
      BigInt(-123456789),
      BigInt(10000),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.quotientAndRemainder(dividingBy: rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Power", configuration: intConfig) { benchmark in
    // Fixed set of base values and powers for consistent results
    let baseValues = [
      BigInt(2),
      BigInt(-2),
      BigInt(10),
      BigInt(-10),
      BigInt(0),
      BigInt(1),
      BigInt(-1),
      BigInt(3),
    ]
    let powerValues = [10, 9, 5, 4, 0, 20, 15, 7]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<baseValues.count {
        let base = baseValues[i]
        let exponent = powerValues[i]
        let result = base.raised(to: exponent)
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt GCD", configuration: intConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigInt(48),
      BigInt(-150),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(42),
      BigInt(128),
      BigInt(625),
      BigInt(10001),
    ]
    let rhsValues = [
      BigInt(18),
      BigInt(225),
      BigInt(987654321),
      BigInt(-123456789),
      BigInt(56),
      BigInt(32),
      BigInt(125),
      BigInt(77),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.greatestCommonDivisor(rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt LCM", configuration: intConfig) { benchmark in
    // Fixed set of operands for consistent results
    let lhsValues = [
      BigInt(12),
      BigInt(-15),
      BigInt(123456),
      BigInt(-987654),
      BigInt(42),
      BigInt(128),
      BigInt(25),
      BigInt(111),
    ]
    let rhsValues = [
      BigInt(18),
      BigInt(20),
      BigInt(654321),
      BigInt(-123456),
      BigInt(56),
      BigInt(32),
      BigInt(75),
      BigInt(37),
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.lowestCommonMultiple(rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Initialize from Integer Literal", configuration: intConfig) { benchmark in
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      let value1: BigInt = 12345678901234567890
      let value2: BigInt = 98765432109876543210
      let value3: BigInt = 4294967296
      let value4: BigInt = 18446744073709551615
      let value5: BigInt = -12345678901234567890
      let value6: BigInt = -98765432109876543210
      blackHole(value1)
      blackHole(value2)
      blackHole(value3)
      blackHole(value4)
      blackHole(value5)
      blackHole(value6)
    }
  }

  Benchmark("BigInt Initialize from String", configuration: intConfig) { benchmark in
    let stringValues = [
      "12345678901234567890",
      "98765432109876543210",
      "4294967296",
      "18446744073709551615",
      "-12345678901234567890",
      "-98765432109876543210",
      "123456789012345678901234567890",
      "-123456789012345678901234567890",
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for stringValue in stringValues {
        let result = BigInt(stringValue)
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Convert to String", configuration: intConfig) { benchmark in
    let numbers = [
      BigInt("12345678901234567890")!,
      BigInt("98765432109876543210")!,
      BigInt("4294967296")!,
      BigInt("18446744073709551615")!,
      BigInt("-12345678901234567890")!,
      BigInt("-98765432109876543210")!,
      BigInt("123456789012345678901234567890")!,
      BigInt("-123456789012345678901234567890")!,
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = number.description
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Initialize from Double", configuration: intConfig) { benchmark in
    let doubleValues = [
      0.0,
      1.0,
      -1.0,
      42.0,
      -42.0,
      123456789.0,
      -123456789.0,
      Double.pi,
      Double.greatestFiniteMagnitude / 1000.0,    // Use a fraction to avoid overflow
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for doubleValue in doubleValues {
        let result = BigInt(doubleValue)
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Convert to Double", configuration: intConfig) { benchmark in
    let intValues = [
      BigInt(0),
      BigInt(1),
      BigInt(-1),
      BigInt(42),
      BigInt(-42),
      BigInt(123456789),
      BigInt(-123456789),
      BigInt("12345678901234567890")!,
      BigInt("-98765432109876543210")!,
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for intValue in intValues {
        let result = Double(intValue)
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt isMultiple", configuration: intConfig) { benchmark in
    let numbers = [
      BigInt(10),
      BigInt(15),
      BigInt(42),
      BigInt(-30),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt("12345678901234567890")!,
      BigInt("-98765432109876543210")!
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = number.isMultiple(of: 10)
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Bitwise AND", configuration: intConfig) { benchmark in
    let lhsValues = [
      BigInt(48),
      BigInt(-150),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(42),
      BigInt(128),
      BigInt(625),
      BigInt(10001)
    ]
    let rhsValues = [
      BigInt(18),
      BigInt(225),
      BigInt(987654321),
      BigInt(-123456789),
      BigInt(56),
      BigInt(32),
      BigInt(125),
      BigInt(77)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs & rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Bitwise OR", configuration: intConfig) { benchmark in
    let lhsValues = [
      BigInt(48),
      BigInt(-150),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(42),
      BigInt(128),
      BigInt(625),
      BigInt(10001)
    ]
    let rhsValues = [
      BigInt(18),
      BigInt(225),
      BigInt(987654321),
      BigInt(-123456789),
      BigInt(56),
      BigInt(32),
      BigInt(125),
      BigInt(77)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs | rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Bitwise XOR", configuration: intConfig) { benchmark in
    let lhsValues = [
      BigInt(48),
      BigInt(-150),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(42),
      BigInt(128),
      BigInt(625),
      BigInt(10001)
    ]
    let rhsValues = [
      BigInt(18),
      BigInt(225),
      BigInt(987654321),
      BigInt(-123456789),
      BigInt(56),
      BigInt(32),
      BigInt(125),
      BigInt(77)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs ^ rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Bitwise NOT", configuration: intConfig) { benchmark in
    let numbers = [
      BigInt(48),
      BigInt(-150),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(42),
      BigInt(128),
      BigInt(625),
      BigInt(10001)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = ~number
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Left Shift", configuration: intConfig) { benchmark in
    let numbers = [
      BigInt(48),
      BigInt(-150),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(42),
      BigInt(128),
      BigInt(625),
      BigInt(10001)
    ]
    let shiftAmounts = [1, 2, 3, 4, 5, 6, 7, 8]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<numbers.count {
        let number = numbers[i]
        let shift = shiftAmounts[i]
        let result = number << shift
        blackHole(result)
      }
    }
  }

  Benchmark("BigInt Right Shift", configuration: intConfig) { benchmark in
    let numbers = [
      BigInt(48),
      BigInt(-150),
      BigInt(123456789),
      BigInt(-987654321),
      BigInt(42),
      BigInt(128),
      BigInt(625),
      BigInt(10001)
    ]
    let shiftAmounts = [1, 2, 3, 4, 5, 6, 7, 8]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<numbers.count {
        let number = numbers[i]
        let shift = shiftAmounts[i]
        let result = number >> shift
        blackHole(result)
      }
    }
  }

  // MARK: - BigUInt

  var uintConfig = Benchmark.Configuration()
  uintConfig.scalingFactor = .kilo

  Benchmark("BigUInt Addition", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt(0),
      BigUInt(42),
      BigUInt("12345678901234567890")!,
      BigUInt("98765432109876543210")!,
      BigUInt(4294967296),
      BigUInt(18446744073709551615)
    ]
    let rhsValues = [
      BigUInt(987654321),
      BigUInt(123456789),
      BigUInt(0),
      BigUInt(42),
      BigUInt("98765432109876543210")!,
      BigUInt("12345678901234567890")!,
      BigUInt(18446744073709551615),
      BigUInt(4294967296)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs + rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Subtraction", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(987654321),
      BigUInt(10000),
      BigUInt(42),
      BigUInt(1000000),
      BigUInt("98765432109876543210")!,
      BigUInt("12345678901234567890123456789")!,
      BigUInt(18446744073709551615),
      BigUInt(4294967296)
    ]
    let rhsValues = [
      BigUInt(123456789),
      BigUInt(1000),
      BigUInt(10),
      BigUInt(10000),
      BigUInt("12345678901234567890")!,
      BigUInt("12345678901234567890")!,
      BigUInt(4294967296),
      BigUInt(42)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs - rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Multiplication", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(12345),
      BigUInt(9876),
      BigUInt(0),
      BigUInt(42),
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt(10000),
      BigUInt(65535)
    ]
    let rhsValues = [
      BigUInt(9876),
      BigUInt(12345),
      BigUInt(0),
      BigUInt(42),
      BigUInt(987654321),
      BigUInt(123456789),
      BigUInt(10000),
      BigUInt(255)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs * rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Division", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(987654321),
      BigUInt(10000),
      BigUInt(42),
      BigUInt(1000000),
      BigUInt("98765432109876543210")!,
      BigUInt("12345678901234567890123456789")!,
      BigUInt(18446744073709551615),
      BigUInt(4294967296)
    ]
    let rhsValues = [
      BigUInt(123456789),
      BigUInt(100),
      BigUInt(7),
      BigUInt(10),
      BigUInt(987654321),
      BigUInt(123456789),
      BigUInt(4294967296),
      BigUInt(42)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.quotientAndRemainder(dividingBy: rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Power", configuration: uintConfig) { benchmark in
    let baseValues = [
      BigUInt(2),
      BigUInt(10),
      BigUInt(16),
      BigUInt(3),
      BigUInt(7),
      BigUInt(42),
      BigUInt(1),
      BigUInt(0)
    ]
    let exponentValues = [10, 5, 4, 7, 3, 2, 100, 0]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<baseValues.count {
        let base = baseValues[i]
        let exponent = exponentValues[i]
        let result = base.raised(to: exponent)
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt GCD", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(48),
      BigUInt(150),
      BigUInt(123456),
      BigUInt(987654),
      BigUInt(42),
      BigUInt(128),
      BigUInt(625),
      BigUInt(10001)
    ]
    let rhsValues = [
      BigUInt(18),
      BigUInt(225),
      BigUInt(654321),
      BigUInt(123456),
      BigUInt(56),
      BigUInt(32),
      BigUInt(125),
      BigUInt(77)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.greatestCommonDivisor(rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt LCM", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(12),
      BigUInt(15),
      BigUInt(123456),
      BigUInt(987654),
      BigUInt(42),
      BigUInt(128),
      BigUInt(25),
      BigUInt(111)
    ]
    let rhsValues = [
      BigUInt(18),
      BigUInt(20),
      BigUInt(654321),
      BigUInt(123456),
      BigUInt(56),
      BigUInt(32),
      BigUInt(75),
      BigUInt(37)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs.lowestCommonMultiple(rhs)
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt isMultiple", configuration: uintConfig) { benchmark in
    let numbers = [
      BigUInt(10),
      BigUInt(15),
      BigUInt(42),
      BigUInt(30),
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt("12345678901234567890")!,
      BigUInt("98765432109876543210")!
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = number.isMultiple(of: 10)
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Bitwise AND", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(48),
      BigUInt(150),
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt(42),
      BigUInt(128),
      BigUInt(625),
      BigUInt(10001)
    ]
    let rhsValues = [
      BigUInt(18),
      BigUInt(225),
      BigUInt(987654321),
      BigUInt(123456789),
      BigUInt(56),
      BigUInt(32),
      BigUInt(125),
      BigUInt(77)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs & rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Bitwise OR", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(48),
      BigUInt(150),
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt(42),
      BigUInt(128),
      BigUInt(625),
      BigUInt(10001)
    ]
    let rhsValues = [
      BigUInt(18),
      BigUInt(225),
      BigUInt(987654321),
      BigUInt(123456789),
      BigUInt(56),
      BigUInt(32),
      BigUInt(125),
      BigUInt(77)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs | rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Bitwise XOR", configuration: uintConfig) { benchmark in
    let lhsValues = [
      BigUInt(48),
      BigUInt(150),
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt(42),
      BigUInt(128),
      BigUInt(625),
      BigUInt(10001)
    ]
    let rhsValues = [
      BigUInt(18),
      BigUInt(225),
      BigUInt(987654321),
      BigUInt(123456789),
      BigUInt(56),
      BigUInt(32),
      BigUInt(125),
      BigUInt(77)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<lhsValues.count {
        let lhs = lhsValues[i]
        let rhs = rhsValues[i]
        let result = lhs ^ rhs
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Bitwise NOT", configuration: uintConfig) { benchmark in
    let numbers = [
      BigUInt(48),
      BigUInt(150),
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt(42),
      BigUInt(128),
      BigUInt(625),
      BigUInt(10001)
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = ~number
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Left Shift", configuration: uintConfig) { benchmark in
    let numbers = [
      BigUInt(48),
      BigUInt(150),
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt(42),
      BigUInt(128),
      BigUInt(625),
      BigUInt(10001)
    ]
    let shiftAmounts = [1, 2, 3, 4, 5, 6, 7, 8]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<numbers.count {
        let number = numbers[i]
        let shift = shiftAmounts[i]
        let result = number << shift
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Right Shift", configuration: uintConfig) { benchmark in
    let numbers = [
      BigUInt(48),
      BigUInt(150),
      BigUInt(123456789),
      BigUInt(987654321),
      BigUInt(42),
      BigUInt(128),
      BigUInt(625),
      BigUInt(10001)
    ]
    let shiftAmounts = [1, 2, 3, 4, 5, 6, 7, 8]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for i in 0..<numbers.count {
        let number = numbers[i]
        let shift = shiftAmounts[i]
        let result = number >> shift
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Initialize from Integer Literal", configuration: uintConfig) { benchmark in
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      let value1: BigUInt = 12345678901234567890
      let value2: BigUInt = 98765432109876543210
      let value3: BigUInt = 4294967296
      let value4: BigUInt = 18446744073709551615
      blackHole(value1)
      blackHole(value2)
      blackHole(value3)
      blackHole(value4)
    }
  }

  Benchmark("BigUInt Initialize from String", configuration: uintConfig) { benchmark in
    let stringValues = [
      "12345678901234567890",
      "98765432109876543210",
      "4294967296",
      "18446744073709551615",
      "123456789012345678901234567890",
      "9876543210987654321098765432109876543210",
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for stringValue in stringValues {
        let result = BigUInt(stringValue)
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Convert to String", configuration: uintConfig) { benchmark in
    let numbers = [
      BigUInt("12345678901234567890")!,
      BigUInt("98765432109876543210")!,
      BigUInt("4294967296")!,
      BigUInt("18446744073709551615")!,
      BigUInt("123456789012345678901234567890")!,
      BigUInt("9876543210987654321098765432109876543210")!,
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for number in numbers {
        let result = number.description
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Initialize from Double", configuration: uintConfig) { benchmark in
    let doubleValues = [
      0.0,
      1.0,
      42.0,
      123456789.0,
      Double.pi,
      Double.greatestFiniteMagnitude / 1000.0,    // Use a fraction to avoid overflow
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for doubleValue in doubleValues {
        let result = BigUInt(doubleValue)
        blackHole(result)
      }
    }
  }

  Benchmark("BigUInt Convert to Double", configuration: uintConfig) { benchmark in
    let uintValues = [
      BigUInt(0),
      BigUInt(1),
      BigUInt(42),
      BigUInt(123456789),
      BigUInt("12345678901234567890")!,
      BigUInt("98765432109876543210")!,
    ]
    benchmark.startMeasurement()
    for _ in benchmark.scaledIterations {
      for uintValue in uintValues {
        let result = Double(uintValue)
        blackHole(result)
      }
    }
  }
}
